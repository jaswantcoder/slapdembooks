{"version":3,"sources":["serviceWorker.js","components/BackgroundContainer/BackgroundContainer.js","components/CheckedInStatus/CheckedInStatus.js","components/Header/Header.js","components/ContainerPanel/ContainerPanel.js","components/TabbedContent/TabbedContent.js","components/StudyBox/StudyBox.js","pages/Home/Home.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","pages/Login/Login.js","index.js"],"names":["Boolean","window","location","hostname","match","BackgroundContainer","props","className","children","CheckedInStatus","class","Header","ContainerPanel","TabBar","TabItem","active","onClick","TabbedContent","useState","activeTab","setActiveTab","tabs","map","tabName","i","key","tabContents","StudyBox","introMessage","contacts","length","toString","noun","contact","src","name","course","Home","FirebaseContext","React","createContext","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doSignInWithGoogle","app","auth","signInWithRedirect","googleProvider","getRedirectResult","then","result","credential","accessToken","user","alert","catch","error","code","message","email","initializeApp","this","GoogleAuthProvider","Login","Consumer","firebase","ReactDOM","render","Provider","value","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8008be1d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './BackgroundContainer.scss';\r\n\r\nconst BackgroundContainer = (props) => (\r\n    <div className=\"BackgroundContainer\">\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport default BackgroundContainer;","import React from 'react';\r\nimport './CheckedInStatus.scss';\r\n\r\nconst CheckedInStatus = (props) => (\r\n    <div class=\"CheckedInStatus\">\r\n    You're checked in as studying MATH 223 at Redpath Library\r\n    \r\n    <div class=\"ActionRow\">\r\n        <a class=\"btn btn-primary\">Check Out</a>\r\n        <a class=\"btn btn-text\">Edit Status</a>\r\n    </div>\r\n</div>\r\n);\r\n\r\nexport default CheckedInStatus;","import React from 'react';\r\nimport './Header.scss';\r\n\r\nconst Header = (props) => (\r\n    <div className=\"Header\">\r\n        <h1>Slap dem Books</h1>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './ContainerPanel.scss';\r\n\r\nconst ContainerPanel = (props) => (\r\n    <div className=\"ContainerPanel\">\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport default ContainerPanel;","import React, { useState } from 'react';\r\nimport './TabbedContent.scss';\r\n\r\nconst TabBar = (props) => (\r\n    <div className=\"TabBar\">\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nconst TabItem = (props) => (\r\n    <div class={'TabItem' + (props.active ? ' active' : '')} onClick={props.onClick}>\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\n/**\r\n * A list of tabbed content\r\n * props.tabs  list of tabs names\r\n * props.tabContents  list of content to display if given tab is active (e.g. if first\r\n *                    tab is selected, first item from tabContents list is displayed)\r\n */\r\nconst TabbedContent = (props) => {\r\n    // Set the first tab as the active tab, and track which tab is selected\r\n    const [activeTab, setActiveTab] = useState(0);\r\n\r\n    return (\r\n        <div className=\"TabbedContent\">\r\n            <TabBar>\r\n                {\r\n                    props.tabs.map((tabName, i) => <TabItem key={i} active={i == activeTab} onClick={() => {setActiveTab(i)}}>{tabName}</TabItem>)\r\n                }\r\n            </TabBar>\r\n\r\n            {props.tabContents[activeTab]}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TabbedContent;","import React from 'react';\r\nimport './StudyBox.scss';\r\n\r\n/**\r\n * List a group of contact studying at a location\r\n * props.contacts  list of contacts at the location\r\n * props.location  name of the location\r\n */\r\nconst StudyBox = (props) => {\r\n    let introMessage = props.contacts.length.toString() + ' ' + props.noun[props.contacts.length === 1 ? 0 : 1] + ' studying at ' + props.location;\r\n\r\n    return (\r\n        <div className=\"StudyBox\">\r\n            <div class=\"intro-label\">{introMessage}</div>\r\n            <div class=\"ContactList\">\r\n                {\r\n                    props.contacts.map((contact, i) => (\r\n                        <div class=\"Contact\" key={i}>\r\n                            <img class=\"pic\" src={'https://i.pravatar.cc/' + (38 + i).toString()}/>\r\n                            {contact.name} is studying {contact.course}\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StudyBox;","import React from 'react';\r\nimport './Home.js';\r\nimport BackgroundContainer from '../../components/BackgroundContainer/BackgroundContainer';\r\nimport CheckedInStatus from '../../components/CheckedInStatus/CheckedInStatus';\r\nimport Header from '../../components/Header/Header.js';\r\nimport ContainerPanel from '../../components/ContainerPanel/ContainerPanel.js';\r\nimport TabbedContent from '../../components/TabbedContent/TabbedContent.js';\r\nimport StudyBox from '../../components/StudyBox/StudyBox.js';\r\n\r\nconst Home = (props) => (\r\n    <div className=\"Page Home\">\r\n        <BackgroundContainer>\r\n            <Header/>\r\n            <CheckedInStatus/>\r\n            <ContainerPanel>\r\n                <TabbedContent tabs={['Friends', 'Courses']}\r\n                               tabContents={[\r\n                                   <div>\r\n                                       <StudyBox contacts={[{name: 'Kate', course: 'NSCI200'}, {name: 'Sasha', course: 'PHIL210'}]} location=\"McLennan\" noun={['friend is', 'friends are']}/>\r\n                                       <StudyBox contacts={[{name: 'Grace', course: 'MATH223'}]} location=\"Burnside\" noun={['friend is', 'friends are']}/>\r\n                                   </div>,\r\n                                   <div>\r\n                                       Find other people studying the same course as you\r\n\r\n                                       <StudyBox contacts={[{name: 'Kate', course: 'NSCI200'}, {name: 'Sasha', course: 'PHIL210'}]} location=\"McLennan\" noun={['person is', 'people are']}/>\r\n                                   </div>\r\n                               ]}/>\r\n            </ContainerPanel>\r\n        </BackgroundContainer>\r\n    </div>\r\n);\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst FirebaseContext = React.createContext(null);\r\n\r\nexport default FirebaseContext;","import app from 'firebase/app';\r\nimport 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDnDWpmq5hezmNEbrLmD--wytNx_NE-Abk\",\r\n    authDomain: \"slapdembooks.firebaseapp.com\",\r\n    databaseURL: \"https://slapdembooks.firebaseio.com\",\r\n    projectId: \"slapdembooks\",\r\n    storageBucket: \"slapdembooks.appspot.com\",\r\n    messagingSenderId: \"526030900055\",\r\n    appId: \"1:526030900055:web:614ec25daf06ea7b31cc12\",\r\n    measurementId: \"G-M9DLQVS5FT\"\r\n  };\r\n\r\nclass Firebase {\r\n    constructor() {\r\n        app.initializeApp(firebaseConfig);\r\n        this.googleProvider = new app.auth.GoogleAuthProvider();\r\n    }\r\n\r\n    doSignInWithGoogle = () => {\r\n        app.auth().signInWithRedirect(this.googleProvider);\r\n        app.auth().getRedirectResult().then(function(result) {\r\n            if (result.credential) {\r\n              // This gives you a Google Access Token. You can use it to access the Google API.\r\n              var token = result.credential.accessToken;\r\n              // ...\r\n            }\r\n            // The signed-in user info.\r\n            var user = result.user;\r\n            alert(user)\r\n          }).catch(function(error) {\r\n            // Handle Errors here.\r\n            var errorCode = error.code;\r\n            var errorMessage = error.message;\r\n            // The email of the user's account used.\r\n            var email = error.email;\r\n            // The firebase.auth.AuthCredential type that was used.\r\n            var credential = error.credential;\r\n            // ...\r\n          });\r\n    }\r\n}\r\n\r\nexport default Firebase;","import FirebaseContext from './context';\r\nimport Firebase from './firebase';\r\n\r\nexport default Firebase;\r\n\r\nexport { FirebaseContext };","import React from 'react';\r\nimport './Login.scss';\r\nimport BackgroundContainer from '../../components/BackgroundContainer/BackgroundContainer.js';\r\nimport { FirebaseContext } from '../../components/Firebase';\r\n\r\nconst Login = (props) => (\r\n    <div className=\"Page Login\">\r\n        <BackgroundContainer>\r\n            <div class=\"aligner\">\r\n                <div className=\"logoPlaceholder\"></div>\r\n                <FirebaseContext.Consumer>\r\n                    {\r\n                        firebase => \r\n                        <div className=\"btn-login googleLogin\" onClick={firebase.doSignInWithGoogle}>\r\n                            Login with Google\r\n                        </div>\r\n                    }\r\n                </FirebaseContext.Consumer>\r\n            </div>\r\n        </BackgroundContainer>\r\n    </div>\r\n);\r\n\r\nexport default Login;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './normalize.css'\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Home from './pages/Home/Home';\nimport Login from './pages/Login/Login';\nimport Firebase, { FirebaseContext } from './components/Firebase';\n\nReactDOM.render(\n    <FirebaseContext.Provider value={new Firebase()}>\n        <Router>\n            <Route exact path='/' component={Home} />\n            <Route exact path='/login' component={Login} />\n        </Router>\n    </FirebaseContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}